import os.path
import glob

VERSION = '0.1'

subdirs = [ '3rd_party', 'appcontext', 'apps', 'statfile', 'genfile', 'qcdb', 'lib' ]

def options( opt ):
		opt.load( 'compiler_cxx' )
		opt.load( 'compiler_c' )

def configure( cfg ):
	cfg.load( 'compiler_c')
	cfg.load( 'compiler_cxx')
	flags = {
		'CXXFLAGS': cfg.env[ 'CXXFLAGS' ],
		'CFLAGS': cfg.env[ 'CFLAGS' ],
		'LINKFLAGS': cfg.env[ 'LINKFLAGS' ]
	}
	flags['CXXFLAGS'].extend(
		[ '-std=c++11', '-Wall', '-pedantic', '-Wno-unused-local-typedefs', '-Wno-c++11-long-long', '-Wno-deprecated-declarations', '-Wno-long-long', '-fPIC' ]
	)
	flags['CFLAGS'].extend(
			[ '-Wall', '-pedantic', '-Wno-unused-local-typedefs', '-Wno-c++11-long-long', 'Wno-deprecated-declarations', '-Wno-long-long', '-fPIC' ]
	)
	mode = 'debug'
	if mode == 'release':
			flags['CXXFLAGS'] += [ '-O3' ]
			flags['CFLAGS'] = [ '-O3' ]
	elif mode == 'debug':
			flags['CXXFLAGS'] += [ '-g' ]
			flags['CFLAGS'] = [ '-g' ]
	else:
			raise Exception( "Unknown value for mode, please specify debug or release" )

	cfg.env['CXXFLAGS'] = flags['CXXFLAGS']
	cfg.env['CFLAGS'] = flags['CFLAGS']
	cfg.env['LINKFLAGS'] = flags['LINKFLAGS']

	cfg.check_cxx( lib='z', uselib_store='zlib', msg = 'zlib' )

	cfg.recurse( subdirs )
	cfg.write_config_header( 'config/config.hpp' )
	

def build( bld ):
	bld(
		target = 'svelte_config',
		includes = "./",
		export_includes = "./"
	)

	bld(
		rule = """printf '#ifndef PACKAGE_REVISION_HPP\n#define PACKAGE_REVISION_HPP\nnamespace globals {\n\tchar const* svelte_version = \"%%s\" ;\n\tchar const* const package_revision = \"%%s\" ;\n}\n#endif\n' `echo """ + VERSION + "` `hg parents --template={node}` > ${TGT}""",
		always = True,
		target = "package_revision_autogenerated.hpp",
		name = "package_revision_autogenerated",
		uselib = "",
		#on_results = True
		on_results = False
	)
	bld.recurse( subdirs )

