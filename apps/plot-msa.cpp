
//					Copyright Gavin Band 2008 - 2012.
// Distributed under the Boost Software License, Version 1.0.
//		(See accompanying file LICENSE_1_0.txt or copy at
//					http://www.boost.org/LICENSE_1_0.txt)

#include "../package_revision_autogenerated.hpp"

// seqlib
#include "SeqLib/RefGenome.h"
#include "SeqLib/BamReader.h"
#include "SeqLib/GenomicRegionCollection.h"
#include "SeqLib/GenomicRegion.h"
//#include "SeqLib/BWAWrapper.h"

namespace seqlib = SeqLib;
// namespace bt = BamTools ;

#include "appcontext/appcontext.hpp"
#include "genfile/GenomePositionRange.hpp"
#include "genfile/string_utils/string_utils.hpp"
#include "genfile/string_utils/slice.hpp"
#include "genfile/Error.hpp"
#include "genfile/Fasta.hpp"
#include "statfile/BuiltInTypeStatSink.hpp"

// #define DEBUG 1

namespace globals {
	std::string const program_name = "plot-msa" ;
	std::string const program_version = package_version ;
	std::string const program_revision = std::string( package_revision ).substr( 0, 7 ) ;
}

struct PlotMSAOptionProcessor: public appcontext::CmdLineOptionProcessor
{
public:
	std::string get_program_name() const { return globals::program_name ; }

	void declare_options( appcontext::OptionProcessor& options ) {
		// Meta-options
		options.set_help_option( "-help" ) ;
		
		options.declare_group( "Input / output file options" ) ;
		options[ "-msa" ]
			.set_description( "Path of FASTA file(s) (or gzipped FASTA file(s)) containing the multiple sequence alignment." )
			.set_is_required()
			.set_takes_values_until_next_option()
		;

		options[ "-o" ]
			.set_description( "Path of output HTML file." )
			.set_takes_single_value()
			.set_default_value( "-" ) ;

		options[ "-distinguish" ]
			.set_description( "Specify the name of a single sequence to distinguish" )
			.set_takes_single_value() ;

		options[ "-highlight" ]
			.set_description( "Specify sequences to highlight in the resulting visualisation" )
			.set_takes_values_until_next_option() ;
	}
} ;

struct PlotMSAApplication: public appcontext::ApplicationContext
{
public:
	PlotMSAApplication( int argc, char** argv ):
		appcontext::ApplicationContext(
			globals::program_name,
			globals::program_version + ", revision " + globals::program_revision,
			std::auto_ptr< appcontext::OptionProcessor >( new PlotMSAOptionProcessor ),
			argc,
			argv,
			"-log"
		)
	{}
	
	void run() {
		try {
			unsafe_process() ;
		}
		catch( genfile::InputError const& e ) {
			ui().logger() << "\nError (" << e.what() <<"): " << e.format_message() << ".\n" ;
			throw appcontext::HaltProgramWithReturnCode( -1 ) ;
		}
		catch( appcontext::OptionProcessingException const& e ) {
			ui().logger() << "\nError (" << e.what() <<"): " << e.message() << ".\n" ;
			throw appcontext::HaltProgramWithReturnCode( -1 ) ;
		} catch( genfile::DuplicateKeyError const& e ) {
			// this 
			ui().logger() << "\nError (" << e.what() <<"): " << e.format_message() << ".\n" ;
			throw appcontext::HaltProgramWithReturnCode( -1 ) ;
		}
	}

private:

	void unsafe_process() {
		genfile::Fasta fasta ;
		auto filenames = options().get_values< std::string >( "-msa" ) ;
		for( auto& filename: filenames ) {
			auto progress_context = ui().get_progress_context( "Loading \"" + filename + "\"" ) ;
			fasta.add_sequences_from_file( filename, progress_context ) ;
		}
		ui().logger() << "Loaded MSA with " << fasta.number_of_sequences() << " sequences.\n" ;
	}
	
	std::string toJSON( genfile::Fasta const& fasta ) const {
		std::ostringstream s ;
		s << "[" ;
		std::size_t count = 0 ;
		std::deque< char > sequence ;
		for( auto& name: fasta.contig_ids() ) {
			genfile::Fasta::PositionedSequenceRange p = fasta.get_sequence( name ) ;
			s << (count>0 ? ",\n" : "" )
				<< "{ \"name\": \""
				<< name
				<< "\", \"sequence\": \""
				<< std::string( p.second.first, p.second.second )
				<< "\" }" ;
		}
		return s.str() ;
	}
} ;


int main( int argc, char** argv )
{
	std::ios_base::sync_with_stdio( false ) ;
	try {
		PlotMSAApplication app( argc, argv ) ;
		app.run() ;
	}
	catch( appcontext::HaltProgramWithReturnCode const& e ) {
		return e.return_code() ;
	}
	return 0 ;
}
	
